# SPDX-License-Identifier: MIT-0
---
# tasks file for dev_work_bootstrap
- name: Install OS Specific packages
  ansible.builtin.include_tasks: "{{ ansible_os_family | lower }}.yaml"
- name: WSL
  when: '"microsoft" in ansible_facts["kernel"]'
  ansible.builtin.include_tasks: wsl.yaml
- name: Setup dotfiles
  tags:
    - dotfiles
  block:
    - name: Clone dotfiles # noqa: latest[git]
      ansible.builtin.git:
        dest: $HOME/.cfg
        repo: https://github.com/raypappa/dotfiles.git
        bare: true
        update: true
    - name: Checkout dotfiles
      ansible.builtin.command: # noqa: command-instead-of-module
        cmd: git --git-dir=$HOME/.cfg/ --work-tree=$HOME checkout main --force
      args:
        creates: $HOME/.zshrc
    - name: Ensure dotfile repo is up to date
      ansible.builtin.command: # noqa: no-changed-when command-instead-of-module
        cmd: git --git-dir=$HOME/.cfg/ --work-tree=$HOME pull --force
- name: Ensure local bin directory exists
  ansible.builtin.file:
    path: $HOME/.local/bin
    state: directory
    mode: "0755"
- name: Setup authorized_keys
  tags:
    - authorized_keys
  block:
    - name: Ensure .ssh dir
      ansible.builtin.file:
        path: $HOME/.ssh
        state: directory
        mode: "0700"
    - name: Authorized_keys
      ansible.builtin.copy:
        src: authorized_keys
        dest: $HOME/.ssh/authorized_keys
        mode: "0600"

- name: Install bash-it # noqa: latest[git]
  ansible.builtin.git:
    dest: $HOME/.bash_it
    repo: https://github.com/Bash-it/bash-it.git
    update: true
- name: Install nvm # noqa: latest[git]
  ansible.builtin.git:
    repo: https://github.com/nvm-sh/nvm.git
    dest: $HOME/.nvm
    recursive: false
  tags:
    - nvm
- name: Install tfenv # noqa: latest[git]
  tags:
    - tfenv
  # state: absent
  ansible.builtin.git:
    repo: https://github.com/tfutils/tfenv.git
    depth: 1
    dest: $HOME/.tfenv
    update: true
- name: Install pyenv and plugins
  tags:
    - pyenv
  block:
    - name: Install pyenv # noqa: latest[git]
      tags:
        - pyenv-app
      ansible.builtin.git:
        repo: https://github.com/pyenv/pyenv.git
        dest: $HOME/.pyenv
        force: true
        update: true
    - name: Install pyenv-virtualenv # noqa: latest[git]
      tags:
        - pyenv-virtualenv
      ansible.builtin.git:
        repo: https://github.com/pyenv/pyenv-virtualenv.git
        dest: $HOME/.pyenv/plugins/pyenv-virtualenv
        update: true
    - name: Install pyenv-update # noqa: latest[git]
      tags:
        - pyenv-update
      ansible.builtin.git:
        repo: https://github.com/pyenv/pyenv-update.git
        dest: $HOME/.pyenv/plugins/pyenv-update
        update: true
    - name: Install pyenv-doctor # noqa: latest[git]
      tags:
        - pyenv-doctor
      ansible.builtin.git:
        repo: https://github.com/pyenv/pyenv-doctor.git
        dest: $HOME/.pyenv/plugins/pyenv-doctor
        update: true
    - name: Install pyenv-default-packages # noqa: latest[git]
      tags:
        - pyenv-default-packages
      ansible.builtin.git:
        repo: https://github.com/jawshooah/pyenv-default-packages.git
        dest: $HOME/.pyenv/plugins/pyenv-default-packages
        update: true
- name: Install goenv # noqa: latest[git]
  tags:
    - goenv
  ansible.builtin.git:
    repo: https://github.com/go-nv/goenv.git
    dest: $HOME/.goenv
    update: true
- name: Install rbenv # noqa: latest[git]
  tags:
    - rbenv
  ansible.builtin.git:
    repo: https://github.com/rbenv/rbenv.git
    dest: $HOME/.rbenv
    update: true
- name: Install spaceship
  tags:
    - spaceship
  block:
    - name: Create .zsh directory
      ansible.builtin.file:
        path: $HOME/.zsh
        state: directory
        mode: "0755"
    - name: Clone spaceship # noqa: latest[git]
      ansible.builtin.git:
        repo: https://github.com/spaceship-prompt/spaceship-prompt.git
        depth: 1
        dest: "$HOME/.zsh/spaceship"
        recursive: false
- name: Git-plugins # noqa: latest[git]
  tags:
    - git-plugins
  ansible.builtin.git:
    repo: https://github.com/afeld/git-plugins.git
    dest: $HOME/.git-plugins
    update: true
- name: Install zsh-nvm # noqa: latest[git]
  ansible.builtin.git:
    repo: https://github.com/lukechilds/zsh-nvm.git
    dest: $HOME/.zsh-nvm
  tags: zsh-nvm

- name: Tmux completions
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/imomaliev/tmux-bash-completion/master/completions/tmux
    dest: $HOME/.local/share/bash-completion/tmux.bash
    mode: "0755"
- name: Alacritty completions
  ansible.builtin.get_url:
    url: https://github.com/alacritty/alacritty/releases/latest/download/alacritty.bash
    dest: $HOME/.local/share/bash-completion/alacritty.bash
    mode: "0755"
  tags:
    - alacritty
# - name: Install Alacritty terminfo
#   ansible.builtin.command: >
#     curl -L -s https://github.com/alacritty/alacritty/releases/latest/download/alacritty.info | sudo tic -xe alacritty,alacritty-direct -
#   tags:
#     - alacritty

- name: Install lazydocker
  tags:
    - lazydocker
  block:
    - name: "Find latest lazydocker version"
      ansible.builtin.uri:
        url: https://github.com/jesseduffield/lazydocker/releases/latest
        headers:
          Accept: application/json
        status_code: 200
      register: lazydocker_latest
    - name: "Extract lazydocker"
      ansible.builtin.unarchive:
        src: "https://github.com/jesseduffield/lazydocker/releases/download/\
          {{ lazydocker_latest.json.tag_name }}/\
          lazydocker_{{ lazydocker_latest.json.tag_name | replace('v', '') }}_\
          {{ ansible_system }}_{{ lazydocker[ansible_system][ansible_architecture] }}.tar.gz"
        dest: $HOME/.local/bin
        include:
          - lazydocker
        keep_newer: true
        remote_src: true
        mode: "0755"
- name: "Install tflint"
  tags:
    - tflint
  block:
    - name: Create tmp dir for tflint
      ansible.builtin.tempfile:
        state: directory
      register: tflint_tmp_dir
    - name: "Install tflint"
      ansible.builtin.unarchive:
        src: "https://github.com/terraform-linters/tflint/releases/latest/download/\
          tflint_{{ ansible_system | lower }}_{{ tflint[ansible_system][ansible_architecture] }}.zip"
        dest: "{{ tflint_tmp_dir.path }}"
        keep_newer: true
        remote_src: true
    - name: Copy tflint
      ansible.builtin.copy:
        src: "{{ tflint_tmp_dir.path }}/tflint"
        dest: $HOME/.local/bin
        mode: "0755"
- name: Install tenv
  tags:
    - tenv
  block:
    - name: "Find latest tenv version"
      ansible.builtin.uri:
        url: https://github.com/tofuutils/tenv/releases/latest
        headers:
          Accept: application/json
        status_code: 200
      register: tenv_latest
    - name: "Download tenv"
      ansible.builtin.unarchive:
        src: "https://github.com/tofuutils/tenv/releases/download/\
          {{ tenv_latest.json.tag_name }}/\
          tenv_{{ tenv_latest.json.tag_name }}_{{ ansible_system }}_{{ tenv[ansible_system][ansible_architecture] }}.tar.gz"
        dest: $HOME/.local/bin
        keep_newer: true
        include:
          - tenv
          - terraform
          - terragrunt
          - tf
          - atmos
        remote_src: true
- name: Install uv
  tags:
    - uv
  block:
    - name: Set uv facts
      ansible.builtin.set_fact:
        uv_dir_name: "uv-{{ uv[ansible_system][ansible_architecture] }}-\
          {{ 'apple' if ansible_system == 'Darwin' else 'unknown' }}-{{ ansible_system | lower }}\
          {{ '-gnu' if ansible_system == 'Linux' else '' }}"
    - name: Install uv
      ansible.builtin.unarchive:
        src: "https://github.com/astral-sh/uv/releases/latest/download/{{ uv_dir_name }}.tar.gz"
        remote_src: true
        keep_newer: true
        mode: "0755"
        dest: $HOME/.local/bin
        creates: $HOME/.local/bin/uvx
        include:
          - "{{ uv_dir_name }}/uv"
          - "{{ uv_dir_name }}/uvx"
        extra_opts:
          - --strip-components=1
- name: Install terraform-docs
  tags:
    - terraform-docs
  block:
    - name: "Find latest terraform-docs version"
      ansible.builtin.uri:
        url: https://github.com/terraform-docs/terraform-docs/releases/latest
        headers:
          Accept: application/json
        status_code: 200
      register: terraform_docs_latest
    - name: "Download terraform-docs"
      ansible.builtin.unarchive:
        src: "https://github.com/terraform-docs/terraform-docs/releases/download/\
          {{ terraform_docs_latest.json.tag_name }}/\
          terraform-docs-{{ terraform_docs_latest.json.tag_name }}-{{ ansible_system | lower }}-\
          {{ terraform_docs[ansible_system][ansible_architecture] }}.tar.gz"
        dest: $HOME/.local/bin
        keep_newer: true
        include:
          - terraform-docs
        remote_src: true
- name: Install glow
  tags:
    - glow
  block:
    - name: "Find latest glow version"
      ansible.builtin.uri:
        url: https://github.com/charmbracelet/glow/releases/latest
        headers:
          Accept: application/json
        status_code: 200
      register: glow_latest
    - name: Set glow facts
      ansible.builtin.set_fact:
        glow_dir_name: "glow_{{ glow_latest.json.tag_name | replace('v', '') }}_\
          {{ ansible_system }}_{{ glow[ansible_system][ansible_architecture] }}"
    - name: "Download glow"
      ansible.builtin.unarchive:
        src: "https://github.com/charmbracelet/glow/releases/download/{{ glow_latest.json.tag_name }}/{{ glow_dir_name }}.tar.gz"
        dest: $HOME/.local/bin
        extra_opts:
          - --strip-components=1
        include: "{{ glow_dir_name }}/glow"
        keep_newer: true
        remote_src: true
- name: Install vale
  tags:
    - vale
  block:
    - name: Set Vale arch and system
      ansible.builtin.set_fact:
        vale_arch: "{{ '64-bit' if ansible_architecture == 'x86_64' else 'arm64' }}"
        vale_system: "{{ 'macOS' if ansible_system == 'Darwin' else ansible_system }}"
    - name: "Find latest vale version"
      ansible.builtin.uri:
        url: https://github.com/errata-ai/vale/releases/latest
        headers:
          Accept: application/json
        status_code: 200
      register: vale_latest
    - name: "Download vale"
      ansible.builtin.unarchive:
        # https://github.com/errata-ai/vale/releases/download/v3.9.5/vale_3.9.5_Darwin_arm64.tar.gz
        # https://github.com/errata-ai/vale/releases/download/v3.9.5/vale_3.9.5_Darwin_arm64.tar.gz
        src: "https://github.com/errata-ai/vale/releases/download/\
          {{ vale_latest.json.tag_name }}/\
          vale_{{ vale_latest.json.tag_name | replace('v', '') }}_\
          {{ vale_system }}_{{ vale_arch }}.tar.gz"
        dest: $HOME/.local/bin
        include:
          - vale
        keep_newer: true
        remote_src: true
        mode: "0755"
- name: Install aws cli
  # Aws has a pkg file that I'm just installing via brew
  when: ansible_system == "Linux"
  tags:
    - aws-cli
  block:
    - name: Create tmp dir for aws-cli
      ansible.builtin.tempfile:
        state: directory
      register: aws_cli_tmp_dir
    # https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
    - name: Download awscli v2 installer.
      ansible.builtin.unarchive:
        src: "https://awscli.amazonaws.com/awscli-exe-linux-{{ ansible_architecture }}.zip"
        dest: "{{ aws_cli_tmp_dir.path }}"
        remote_src: true
        creates: "{{ aws_cli_tmp_dir.path }}/aws/install"
        mode: "0755"
    - name: Run the installer
      ansible.builtin.command:
      args:
        cmd: "{{ aws_cli_tmp_dir.path }}/aws/install --bin-dir $HOME/.local/bin --install-dir $HOME/.local/opt/aws-cli"
        creates: $HOME/.local/bin/aws
- name: Install aws sam CLI
  # Aws has a pkg file that I'm just installing via brew
  when: ansible_system == "Linux"
  tags:
    - aws-sam-cli
  block:
    - name: Find latest version
      ansible.builtin.uri:
        url: https://github.com/aws/aws-sam-cli/releases/latest
        headers:
          Accept: application/json
        status_code: 200
      register: sam_latest
    - name: Create tmp dir for aws-sam-cli
      ansible.builtin.tempfile:
        state: directory
      register: aws_sam_cli_tmp_dir
    - name: Download
      ansible.builtin.unarchive:
        src: "https://github.com/aws/aws-sam-cli/releases/download/\
          {{ sam_latest.json.tag_name }}/aws-sam-cli-linux-{{ aws_sam_cli[ansible_system][ansible_architecture] }}.zip"
        dest: "{{ aws_sam_cli_tmp_dir.path }}"
        remote_src: true
        creates: "{{ aws_sam_cli_tmp_dir.path }}/install"
    - name: Install
      ansible.builtin.command:
        cmd: "{{ aws_sam_cli_tmp_dir.path }}/install --bin-dir $HOME/.local/bin --install-dir $HOME/.local/opt/aws-sam-cli"
        creates: $HOME/.local/bin/sam
- name: Install aws-vault
  tags:
    - aws-vault
  block:
    - name: Install aws-vault on Darwin
      when: ansible_system == "Darwin"
      community.general.homebrew:
        name: aws-vault
    - name: Install aws-vault on linux
      when: ansible_system == "Linux"
      ansible.builtin.get_url:
        url: "https://github.com/99designs/aws-vault/releases/latest/download/\
          aws-vault-{{ ansible_system | lower }}-{{ aws_vault[ansible_system][ansible_architecture] }}"
        dest: $HOME/.local/bin/aws-vault
        mode: "0755"
- name: Install kubectl
  tags:
    - kubectl
  block:
    - name: Find latest version
      ansible.builtin.uri:
        url: https://dl.k8s.io/release/stable.txt
        status_code: 200
        return_content: true
      register: kubectl_latest
    - name: Download kubectl
      ansible.builtin.get_url:
        url: "https://dl.k8s.io/release/{{ kubectl_latest.content }}/bin/\
          {{ ansible_system | lower }}/{{ kubectl[ansible_system][ansible_architecture] }}/kubectl"
        dest: $HOME/.local/bin/kubectl
        mode: "0755"
- name: Install fzf
  tags:
    - fzf
  block:
    - name: Find latest version
      ansible.builtin.uri:
        url: https://github.com/junegunn/fzf/releases/latest
        headers:
          Accept: application/json
        status_code: 200
      register: fzf_latest
    - name: Download fzf
      ansible.builtin.unarchive:
        src: "https://github.com/junegunn/fzf/releases/download/\
          {{ fzf_latest.json.tag_name }}/fzf-{{ fzf_latest.json.tag_name | replace('v', '') }}-\
          {{ ansible_system }}_{{ fzf[ansible_system][ansible_architecture] }}.tar.gz"
        dest: $HOME/.local/bin
        include:
          - fzf
        keep_newer: true
        remote_src: true
        mode: "0755"
- name: Install neovim
  tags:
    - neovim
  block:
    - name: Set neovim facts
      ansible.builtin.set_fact:
        neovim_system: "{{ 'macos' if ansible_system == 'Darwin' else ansible_system | lower }}"
    - name: Create temp directory for neovim
      ansible.builtin.file:
        path: $HOME/.local/nvim
        state: directory
        mode: "0755"
    - name: Download neovim
      ansible.builtin.unarchive:
        # ansible_system might be macos not Darwin.
        src: https://github.com/neovim/neovim/releases/latest/download/nvim-{{ neovim_system }}-{{ neovim[ansible_system][ansible_architecture] }}.tar.gz
        remote_src: true
        keep_newer: true
        mode: "0755"
        dest: $HOME/.local/nvim
        extra_opts:
          - --strip-components=1
    - name: Symlink nvim
      ansible.builtin.file:
        src: $HOME/.local/nvim/bin/nvim
        dest: $HOME/.local/bin/nvim
        state: link
- name: Install ripgrep
  tags:
    - ripgrep
  block:
    - name: Find latest version of ripgrep
      ansible.builtin.uri:
        url: https://github.com/BurntSushi/ripgrep/releases/latest
        headers:
          Accept: application/json
        status_code: 200
      register: ripgrep_latest
    - name: Set ripgrep facts
      ansible.builtin.set_fact:
        ripgrep_dir: "ripgrep-{{ ripgrep_latest.json.tag_name }}-{{ ripgrep[ansible_system][ansible_architecture] }}-\
            {{ 'apple' if ansible_system == 'Darwin' else 'unknown' }}-{{ ansible_system | lower }}\
            {{ '-musl' if ansible_architecture == 'x86_64' else '-gnu' if ansible_system == 'Linux' else '' }}"
    - name: Install ripgrep
      ansible.builtin.unarchive:
        # ripgrep-14.1.1-x86_64-unknown-linux-musl.tar.gz
        # ripgrep-14.1.1-x86_64-apple-darwin.tar.gz
        # ripgrep-14.1.1-aarch64-apple-darwin.tar.gz
        # ripgrep-14.1.1-aarch64-unknown-linux-gnu.tar.gz
        src: "https://github.com/BurntSushi/ripgrep/releases/download/{{ ripgrep_latest.json.tag_name }}/{{ ripgrep_dir }}.tar.gz"
        dest: $HOME/.local/bin
        include:
          - "{{ ripgrep_dir }}/rg"
        keep_newer: true
        remote_src: true
        mode: "0755"
        extra_opts:
          - --strip-components=1
        creates: $HOME/.local/bin/rg
- name: Install fd
  tags:
    - fd
  block:
    - name: Find latest version of fd
      ansible.builtin.uri:
        url: https://github.com/sharkdp/fd/releases/latest
        headers:
          Accept: application/json
        status_code: 200
      register: fd_latest
    - name: Set fd facts
      ansible.builtin.set_fact:
        fd_dir_name: "fd-{{ fd_latest.json.tag_name }}-{{ fd[ansible_system][ansible_architecture] }}-\
          {{ 'apple' if ansible_system == 'Darwin' else 'unknown' }}-{{ ansible_system | lower }}\
          {{ '-gnu' if ansible_system == 'Linux' else '' }}"
    - name: Install fd
      ansible.builtin.unarchive:
        src: "https://github.com/sharkdp/fd/releases/download/\
          {{ fd_latest.json.tag_name }}/{{ fd_dir_name }}.tar.gz"
        dest: $HOME/.local/bin
        include:
          - "{{ fd_dir_name }}/fd"
        keep_newer: true
        remote_src: true
        mode: "0755"
        extra_opts:
          - --strip-components=1
        creates: $HOME/.local/bin/fd
- name: Install tree-sitter
  tags:
    - tree-sitter
  block:
    - name: Create Temp Directory for tree-sitter
      ansible.builtin.tempfile:
        state: directory
      register: tree_sitter_tmp_dir
    - name: Download tree-sitter
      ansible.builtin.get_url:
        # TODO(craig): check ansible_system is Darwin or MacOS
        # https://github.com/tree-sitter/tree-sitter/releases/latest/download/tree-sitter-Darwin-x64.gz

        url: "https://github.com/tree-sitter/tree-sitter/releases/latest/download/\
          tree-sitter-{{ 'macos' if ansible_system == 'Darwin' else 'linux' }}-\
          {{ tree_sitter[ansible_system][ansible_architecture] }}.gz"
        dest: "{{ tree_sitter_tmp_dir.path }}/tree-sitter.gz"
        mode: "0644"
    - name: Install tree-sitter
      community.general.decompress:
        src: "{{ tree_sitter_tmp_dir.path }}/tree-sitter.gz"
        dest: $HOME/.local/bin/tree-sitter
        mode: "0755"
        format: gz
- name: Install pnpm
  tags:
    - pnpm
  ansible.builtin.get_url:
    url: "https://github.com/pnpm/pnpm/releases/latest/download/\
      pnpm-{{ 'macos' if ansible_system == 'Darwin' else ansible_system | lower }}-{{ pnpm[ansible_system][ansible_architecture] }}"
    dest: $HOME/.local/bin/pnpm
    mode: "0755"
- name: Install Github CLI
  tags:
    - gh
  block:
    - name: Find latest version of Github CLI
      ansible.builtin.uri:
        url: https://github.com/cli/cli/releases/latest
        headers:
          Accept: application/json
        status_code: 200
      register: gh_latest
    - name: Set Github CLI facts
      ansible.builtin.set_fact:
        gh_dir_name: "gh_{{ gh_latest.json.tag_name | replace('v', '') }}_\
          {{ 'macOS' if ansible_system == 'Darwin' else ansible_system | lower }}_\
          {{ gh[ansible_system][ansible_architecture] }}"
    - name: Download Linux Github CLI
      when: ansible_system == "Linux"
      ansible.builtin.unarchive:
        src: "https://github.com/cli/cli/releases/download/{{ gh_latest.json.tag_name }}/{{ gh_dir_name }}.tar.gz"
        dest: $HOME/.local/
        include:
          - "{{ gh_dir_name }}/bin/gh"
        keep_newer: true
        extra_opts:
          - --strip-components=1
        remote_src: true
        mode: "0755"
    - name: Create tmp dir for github cli
      ansible.builtin.tempfile:
        state: directory
      register: gh_tmp_dir
      when: ansible_system == "Darwin"
    - name: Download Darwin Github CLI
      when: ansible_system == "Darwin"
      ansible.builtin.unarchive:
        src: "https://github.com/cli/cli/releases/download/{{ gh_latest.json.tag_name }}/{{ gh_dir_name }}.zip"
        dest: "{{ gh_tmp_dir.path }}"
        keep_newer: true
        remote_src: true
    - name: Copy Github CLI
      when: ansible_system == "Darwin"
      ansible.builtin.copy:
        src: "{{ gh_tmp_dir.path }}/{{ gh_dir_name }}/bin/gh"
        creates: $HOME/.local/bin/gh
        dest: $HOME/.local/bin/
        mode: "0755"
- name: Install taskfile
  tags:
    - taskfile
  block:
    - name: Create temp directory for taskfile
      ansible.builtin.tempfile:
        state: directory
      register: taskfile_tmp_dir
    - name: Download taskfile
      ansible.builtin.unarchive:
        src: "https://github.com/go-task/task/releases/latest/download/\
          task_{{ ansible_system | lower }}_{{ task[ansible_system][ansible_architecture] }}.tar.gz"
        dest: "{{ taskfile_tmp_dir.path }}"
        mode: "0755"
        keep_newer: true
        remote_src: true
    - name: Install taskfile bin
      ansible.builtin.copy:
        src: "{{ taskfile_tmp_dir.path }}/task"
        dest: $HOME/.local/bin/task
        mode: "0755"
    - name: Install taskfile bash completion
      ansible.builtin.copy:
        src: "{{ taskfile_tmp_dir.path }}/completion/bash/task.bash"
        dest: $HOME/.local/share/bash-completion/task.bash
        mode: "0755"
        # I don't know where zsh completion is supposed to go
        # - name: Install zsh completion
        #   ansible.builtin.copy:
        #     src: "{{ taskfile_tmp_dir.path }}/completion/zsh/_task"
        #     dest: $HOME/.local/share/zsh/site-functions/_task
        #     mode: "0755"
- name: Install git-checkout-branch
  tags:
    - git-checkout-branch
  block:
    - name: Install git-checkout-branch on amd64
      when: ansible_architecture == "amd64"
      ansible.builtin.get_url:
        url: https://github.com/royeo/git-checkout-branch/releases/latest/download/git-checkout-branch-{{ ansible_system }}-{{ ansible_architecture }}
        dest: $HOME/.local/bin/git-checkout-branch
        mode: "0755"
    # TODO(raypappa): go install github.com/royeo/git-checkout-branch@latest for arm64
- name: Install k9s
  tags:
    - k9s
  ansible.builtin.unarchive:
    src: "https://github.com/derailed/k9s/releases/latest/download/\
      k9s_{{ ansible_system }}_{{ k9s[ansible_system][ansible_architecture] }}.tar.gz"
    dest: $HOME/.local/bin
    include:
      - k9s
    keep_newer: true
    remote_src: true
    mode: "0755"
- name: Install Rust
  tags:
    - rust
  block:
    - name: Check if rustup has been installed
      ansible.builtin.stat:
        path: "{{ rustup_bin }}"
      register: rustup_st
    - name: Create temporary directory
      ansible.builtin.tempfile:
        state: directory
        suffix: rustup
      register: rustup_tmp
    - name: Download rustup-init script
      ansible.builtin.get_url:
        dest: "{{ rustup_tmp.path }}/rustup-init.sh"
        url: https://sh.rustup.rs
        mode: "0644"
    - name: Run rustup-init script
      ansible.builtin.command: "sh {{ rustup_tmp.path }}/rustup-init.sh -y --no-modify-path"
      changed_when: true
      when: not rustup_st.stat.exists
- name: Install kustomize
  tags:
    - kustomize
  block:
    - name: Find latest version of kustomize
      ansible.builtin.uri:
        url: https://github.com/kubernetes-sigs/kustomize/releases/latest
        headers:
          Accept: application/json
        status_code: 200
      register: kustomize_latest
    - name: Install kustomize
      ansible.builtin.unarchive:
        src: "https://github.com/kubernetes-sigs/kustomize/releases/download/\
          {{ kustomize_latest.json.tag_name }}/\
          kustomize_{{ 1 | extract(kustomize_latest.json.tag_name | split('/')) }}_\
          {{ ansible_system | lower }}_{{ kustomize[ansible_system][ansible_architecture] }}.tar.gz"
        dest: $HOME/.local/bin
        mode: "0755"
        keep_newer: true
        remote_src: true
- name: Install cloudflared
  tags:
    - cloudflared
  ansible.builtin.get_url:
    url: "https://github.com/cloudflare/cloudflared/releases/latest/download/\
      cloudflared-{{ ansible_system | lower }}-{{ cloudflared[ansible_system][ansible_architecture] }}"
    dest: $HOME/.local/bin/cloudflared
    mode: "0755"
- name: Install komac nightly
  tags:
    - komac-nightly
    - never
  ansible.builtin.unarchive:
    src: "https://github.com/russellbanks/Komac/releases/download/nightly/\
      komac-nightly-{{ ansible_architecture }}-{{ 'apple' if ansible_system == 'Darwin' else 'unknown' }}-\
      {{ ansible_system | lower }}{{ '-gnu' if ansible_system == 'Linux' else '' }}.tar.gz"
    remote_src: true
    keep_newer: true
    mode: "0755"
    dest: $HOME/.local/bin
- name: Install yq
  tags:
    - yq
  ansible.builtin.get_url:
    url: https://github.com/mikefarah/yq/releases/latest/download/yq_{{ ansible_system | lower }}_{{ yq[ansible_system][ansible_architecture] }}
    dest: $HOME/.local/bin/yq
    mode: "0755"
- name: Install chart-testing
  tags:
    - chart-testing
  block:
    - name: Find latest version of chart-testing
      ansible.builtin.uri:
        url: https://github.com/helm/chart-testing/releases/latest
        headers:
          Accept: application/json
        status_code: 200
      register: ct_latest
    - name: Install chart-testing
      ansible.builtin.unarchive:
        src: "https://github.com/helm/chart-testing/releases/download/\
          {{ ct_latest.json.tag_name }}/\
          chart-testing_{{ ct_latest.json.tag_name | replace('v', '') }}_\
          {{ ansible_system | lower }}_{{ chart_testing[ansible_system][ansible_architecture] }}.tar.gz"
        remote_src: true
        keep_newer: true
        mode: "0755"
        dest: $HOME/.local/bin
        include:
          - ct
- name: Install rain
  block:
    - name: Find latest version of rain
      ansible.builtin.uri:
        url: https://github.com/aws-cloudformation/rain/releases/latest
        headers:
          Accept: application/json
        status_code: 200
      register: rain_latest
    - name: Set rain facts
      ansible.builtin.set_fact:
        rain_dir_name: rain-{{ rain_latest.json.tag_name }}_{{ ansible_system | lower }}-{{ rain[ansible_system][ansible_architecture] }}
    - name: Create tmp dir for rain
      ansible.builtin.tempfile:
        state: directory
      register: rain_tmp_dir
    - name: Install rain
      ansible.builtin.unarchive:
        src: "https://github.com/aws-cloudformation/rain/releases/download/{{ rain_latest.json.tag_name }}/{{ rain_dir_name }}.zip"
        dest: "{{ rain_tmp_dir.path }}"
        keep_newer: true
        remote_src: true
    - name: Copy rain to local bin
      ansible.builtin.copy:
        src: "{{ rain_tmp_dir.path }}/{{ rain_dir_name }}/rain"
        dest: $HOME/.local/bin
        mode: "0755"
- name: Install tools via uv # noqa: no-changed-when
  tags:
    - uv-tools
  ansible.builtin.command:
    cmd: uv tool install {{ item }}
  loop:
    - mdformat
    - pre-commit
- name: Setup nvm
  tags:
    - nvm
  ansible.builtin.shell: ". {{ ansible_env.HOME }}/.nvm/nvm.sh && nvm install --lts --latest-npm -b --no-progress --default"
  args:
    creates: "{{ ansible_env.HOME }}/.nvm/versions/node"
    chdir: "{{ ansible_env.HOME }}"
    executable: /bin/bash
# TODO(raypappa): NVM_BIN won't be present on first run because nvm isn't loaded in the shell.
# - name: Install npm modules and symlink
#   tags:
#     - npm
#   block:
#     - name: Set npm packages to install globally
#       ansible.builtin.set_fact:
#         npm_packages:
#         - jsonlint
#         - yaml-language-server
#         - cspell
#         - aws-azure-login
#         - markdown-toc
#     - name: Install npm modules
#       community.general.npm:
#         global: true
#         name: "{{ item }}"
#       loop: "{{ npm_packages }}"
#     - name: Symlink to global
#       ansible.builtin.file:
#         src: $NVM_BIN/{{ item }}
#         dest: $HOME/.local/bin/{{ item }}
#         state: link
#       loop: "{{ npm_packages }}"
- name: Setup latest python version with pyenv
  tags:
    - python
  block:
    - name: Determine latest version of python # noqa: no-changed-when
      ansible.builtin.command: pyenv latest -k 3
      register: latest_python
    - name: Install latest version of python # noqa: no-changed-when
      ansible.builtin.command: pyenv install -s {{ latest_python.stdout }}
- name: Setup latest version of go with pyenv
  tags:
    - go
  block:
    - name: Install latest version of go # noqa: no-changed-when
      tags:
        - go
      ansible.builtin.command: goenv install latest -q
    - name: Set  latest version of go as global # noqa: no-changed-when
      tags:
        - go
      ansible.builtin.command: goenv global latest
